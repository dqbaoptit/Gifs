{"version":3,"sources":["components/Searcher/index.jsx","components/Footer/index.jsx","App.js","serviceWorker.js","index.js"],"names":["props","placeholder","holder","value","onChange","handleChange","Footer","Layout","style","textAlign","antIcon","LoadingOutlined","fontSize","color","spin","App","useState","search","setSearch","url","setUrl","query","setQuery","gifs","setGifs","loading","setLoading","useEffect","a","fetch","response","json","data","console","log","Fetch","timeout","setTimeout","clearTimeout","align","e","target","indicator","className","map","gif","i","key","hoverable","margin","autoPlay","loop","src","images","fixed_height","mp4","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wKAEe,G,YAAA,SAACA,GACZ,OACI,6BACI,2BACIC,YAAaD,EAAME,OACnBC,MAAOH,EAAMG,MACbC,SAAUJ,EAAMK,kB,SCLxBC,G,MAAWC,IAAXD,QACO,aACX,OACI,kBAAC,EAAD,CAAQE,MAAO,CAAEC,UAAW,WACxB,qD,2BCDNC,EAAU,kBAACC,EAAA,EAAD,CAAiBH,MAAO,CAAEI,SAAU,IAAIC,MAAO,OAASC,MAAI,IA8D7DC,MA5Df,WAAgB,IAAD,EACcC,mBAAS,IADvB,mBACNC,EADM,KACCC,EADD,OAEQF,mBAAS,qGAFjB,mBAENG,EAFM,KAEFC,EAFE,OAGYJ,mBAAS,IAHrB,mBAGNK,EAHM,KAGAC,EAHA,OAIUN,mBAAS,IAJnB,mBAINO,EAJM,KAIDC,EAJC,OAKgBR,oBAAS,GALzB,mBAKNS,EALM,KAKEC,EALF,KAwCb,OAjCAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACEF,GAAW,GADb,kBAG2BG,MAAMV,GAHjC,cAGUW,EAHV,gBAIuBA,EAASC,OAJhC,OAIUA,EAJV,OAKIP,EAAQO,EAAKC,MACbC,QAAQC,IAAIH,EAAKC,MACjBN,GAAW,GAPf,kDAUIO,QAAQC,IAAI,KAAMH,QAClBL,GAAW,GAXf,2DADc,uBAAC,WAAD,wBAedS,KACA,CAAChB,IACHQ,qBAAU,WAENP,EADY,KAAVC,EACK,mFAAD,OAAoFA,EAApF,uCAEC,uGAET,CAACA,IAEHM,qBAAU,WACR,IAAMS,EAAUC,YAAW,WACzBf,EAASL,KACT,KACF,OAAO,kBACLqB,aAAaF,MACf,CAACnB,IAID,yBAAKsB,MAAM,UACT,kBAAC,EAAD,CAASpC,MAAOc,EAAQZ,aAAc,SAACmC,GAAQtB,EAAUsB,EAAEC,OAAOtC,QAChED,OAAO,kBAERuB,EAAU,kBAAC,IAAD,CAAMiB,UAAWhC,IAC1B,yBAAKiC,UAAU,aACZpB,EAAKqB,KAAI,SAACC,EAAIC,GAAL,OACR,kBAAC,IAAD,CAAMC,IAAKD,EAAGE,WAAS,EAACL,UAAU,QAAQnC,MAAO,CAAEyC,OAAQ,KACzD,2BAAOC,UAAQ,EAACC,MAAI,EAACC,IAAKP,EAAIQ,OAAOC,aAAaC,WAK1D,kBAAC,EAAD,QCnDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.ff1eeefa.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\nexport default (props) => {\n    return (\n        <div>\n            <input\n                placeholder={props.holder}\n                value={props.value}\n                onChange={props.handleChange} />\n        </div>\n    )\n}\n","import React from 'react';\nimport { Layout } from 'antd';\nimport './index.css';\nconst { Footer } = Layout;\nexport default () => {\n    return (\n        <Footer style={{ textAlign: 'center' }}>\n            <p>\n                Data from  Giphy.com\n            </p>\n        </Footer>\n    )\n}","import React,{ useState,useEffect } from 'react';\nimport './App.css';\nimport Seacher from './components/Searcher';\nimport Footer from './components/Footer';\nimport { Spin,Card } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nconst antIcon = <LoadingOutlined style={{ fontSize: 200,color: \"red\" }} spin />;\n\nfunction App() {\n  const [search,setSearch] = useState('');\n  const [url,setUrl] = useState('https://api.giphy.com/v1/gifs/trending?api_key=B3d73H94YDaNTZ3YVG2byUpCWmJvNnmN&limit=32&rating=G');\n  const [query,setQuery] = useState('');\n  const [gifs,setGifs] = useState([]);\n  const [loading,setLoading] = useState(false);\n\n  useEffect(() => {\n    async function Fetch() {\n      setLoading(true);\n      try {\n        const response = await fetch(url);\n        const json = await response.json();\n        setGifs(json.data);\n        console.log(json.data)\n        setLoading(false);\n      } catch\n      (error) {\n        console.log(error.json());\n        setLoading(false)\n      }\n    };\n    Fetch();\n  },[url]);\n  useEffect(() => {\n    if (query !== \"\")\n      setUrl(`https://api.giphy.com/v1/gifs/search?api_key=B3d73H94YDaNTZ3YVG2byUpCWmJvNnmN&q=${query}&limit=32&offset=0&rating=G&lang=en`)\n    else {\n      setUrl('https://api.giphy.com/v1/gifs/trending?api_key=B3d73H94YDaNTZ3YVG2byUpCWmJvNnmN&limit=32&rating=G')\n    }\n  },[query])\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setQuery(search)\n    },200)\n    return () =>\n      clearTimeout(timeout)\n  },[search])\n\n  return (\n\n    <div align='center'>\n      <Seacher value={search} handleChange={(e) => { setSearch(e.target.value) }}\n        holder=\"Search GIF...\"\n      />\n      {loading ? <Spin indicator={antIcon} /> :\n        <div className=\"container\">\n          {gifs.map((gif,i) =>\n            <Card key={i} hoverable className=\"video\" style={{ margin: 16 }} >\n              <video autoPlay loop src={gif.images.fixed_height.mp4} />\n            </Card>\n          )}\n        </div>\n      }\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}